# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Load App Store Connect info to use in subsequent lanes"
  lane :load_app_store_connect_info do
    app_store_connect_api_key(
      key_id: ENV["APPSTORECONNECT_KEY_ID"],
      issuer_id: ENV["APPSTORECONNECT_ISSUER_ID"],
      key_content: ENV["APPSTORECONNECT_PRIVATE_KEY"],
      is_key_content_base64: true,
      in_house: false
    )
  end

  # investigate app build number and version bumping

  desc "Install signing certificate in the keychain and download provisioning profiles from App Store Connect"
  lane :prepare_signing do |options|
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
 
    keychain_name = "signing"
    keychain_password = "temp"
 
    delete_keychain(
      name: keychain_name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{keychain_name}-db")
 
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )
 
    import_certificate(
      certificate_path: ENV["SIGNING_KEY_FILE_PATH"],
      certificate_password: ENV["SIGNING_KEY_PASSWORD"],
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )
 
    # fetches and installs provisioning profiles from App Store Connect
    sigh(
      adhoc: options[:adhoc],
      api_key: api_key,
      readonly: true
    )
  end


  desc "Build the iOS app for release"
  lane :build_release do |options|
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    profile_name = "App Provisioning Profile" # replace with the name of the profile to use for the build
    output_name = "example-iOS" # specify the name of the .ipa file to generate
    export_method = "app-store" # specify the export method

    # turn off automatic signing during build so correct code signing identity is guaranteed to be used
    update_code_signing_settings(
      use_automatic_signing: false,
      targets: ["main-target"], # specify which targets to update code signing settings for
      code_sign_identity: "Apple Distribution", # replace with name of code signing identity if different
      bundle_identifier: app_identifier,
      profile_name: profile_name,
      build_configurations: ["Release"] # only toggle code signing settings for Release configurations
    )

    # build the app
    gym(
      scheme: "Carris Metropolitana", # replace with name of your project’s scheme
      output_name: output_name,
      configuration: "Release",
      export_options: {
        method: export_method,
        provisioningProfiles: {
          app_identifier => profile_name # here you can add any additional bundle identifiers and their associated provisioning profiles if you’re also building an app extension or other bundle identifier
        }
      }
    )
  end

desc "Upload to TestFlight / App Store Connect"
lane :upload_release do
 api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

 deliver(
     api_key: api_key,
     skip_screenshots: true,
     skip_metadata: true,
     skip_app_version_update: true,
     force: true, # skips verification of HTML preview file (since this will be run from a CI machine)
     run_precheck_before_submit: false # not supported through ASC API yet
 )
end
end